{"version":3,"sources":["SearchBox.js","PokeCard.js","PokeList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","PokeCard","state","imgUrl","thisPokemonId","fetch","this","props","url","then","response","json","info","setState","id","sprites","front_default","src","alt","name","charAt","toUpperCase","slice","React","Component","PokeList","pokemon","map","poke","i","key","App","onSearchChange","event","searchfield","target","value","results","filteredPokemon","filter","includes","toLowerCase","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAgBeA,G,MAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACX,2BACAC,KAAK,SACLD,UAAU,mCACVE,YAAY,sBACZC,SAAUJ,OCyBPK,E,kDAhCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,OAAQ,GACRC,cAAe,GAJT,E,gEAOO,IAAD,OAChBC,MAAMC,KAAKC,MAAMC,KAAKC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC/CF,MAAM,SAACG,GACJ,EAAKC,SAAS,CACVT,cAAeQ,EAAKE,GACpBX,OAAQS,EAAKG,QAAQC,qB,+BAMtB,IAAD,EAC4BV,KAAKJ,MAA/BC,EADF,EACEA,OAAQC,EADV,EACUA,cAChB,OACI,yBAAKP,UAAU,yDACX,yBAAKoB,IAAKd,EAAQe,IAAI,YACtB,6BACI,4BAAKZ,KAAKC,MAAMY,KAAKC,OAAO,GAAGC,cAAgBf,KAAKC,MAAMY,KAAKG,MAAM,IACrE,6CAAmBlB,S,GA1BhBmB,IAAMC,WCedC,EAdE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACI,6BAEQA,EAAQC,KAAI,SAACC,EAAKC,GACd,OACI,kBAAC,EAAD,CAAUC,IAAKF,EAAKT,KAAMA,KAAMS,EAAKT,KAAMX,IAAKoB,EAAKpB,WCmC9DuB,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKpB,SAAS,CAAEqB,YAAaD,EAAME,OAAOC,SAd1C,EAAKlC,MAAQ,CACTwB,QAAS,GACTQ,YAAa,IAJL,E,gEAQO,IAAD,OAClB7B,MAAM,wDACHI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAACG,GACN,EAAKC,SAAS,CAAEa,QAASd,EAAKyB,e,+BAO1B,IAAD,EAC0B/B,KAAKJ,MAA9BwB,EADD,EACCA,QAASQ,EADV,EACUA,YACXI,EAAkBZ,EAAQa,QAAO,SAAAb,GACrC,OAAOA,EAAQP,KAAKqB,SAASN,EAAYO,kBAG3C,OAAQf,EAAQgB,OAGV,yBAAK7C,UAAU,MACb,wBAAIA,UAAW,SAASiB,GAAG,SAA3B,eACA,kBAAC,EAAD,CAAWlB,aAAcU,KAAK0B,iBAC9B,kBAAC,EAAD,CAAUN,QAASY,KALzB,wBAAIzC,UAAU,MAAd,kB,GA3BY0B,IAAMC,YCMJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.90665b3d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            type='search' \r\n            className='pa3 ba b--blue bg-light-green tc' \r\n            placeholder='Enter Pokemon Name!' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass PokeCard extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            imgUrl: '',\r\n            thisPokemonId: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(this.props.url).then(response => response.json())\r\n        .then( (info) => {\r\n            this.setState({\r\n                thisPokemonId: info.id,\r\n                imgUrl: info.sprites.front_default })\r\n        })\r\n\r\n        // this.setState({imgUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/'+ this.state.thisPokemonId.toString() + '.png' })\r\n    }\r\n\r\n    render () {\r\n        const { imgUrl, thisPokemonId } = this.state\r\n        return (\r\n            <div className='tc bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={imgUrl} alt=\"pokemon\"/>\r\n                <div>\r\n                    <h1>{this.props.name.charAt(0).toUpperCase() + this.props.name.slice(1)}</h1>\r\n                    <p>National Dex # {thisPokemonId}</p>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default PokeCard;","import React from 'react';\r\nimport PokeCard from './PokeCard';\r\n\r\nconst PokeList = ({pokemon}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                pokemon.map((poke,i) => {\r\n                    return (\r\n                        <PokeCard key={poke.name} name={poke.name} url={poke.url}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeList;","import React from 'react';\r\nimport './App.css';\r\nimport SearchBox from './SearchBox';\r\nimport PokeList from './PokeList';\r\nimport 'tachyons';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        pokemon: [],\r\n        searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151&offset=0')\r\n      .then(response => response.json())\r\n      .then( (info) => {\r\n        this.setState({ pokemon: info.results})})\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { pokemon, searchfield } = this.state;\r\n    const filteredPokemon = pokemon.filter(pokemon => {\r\n      return pokemon.name.includes(searchfield.toLowerCase())\r\n    })\r\n\r\n    return !pokemon.length ?\r\n      <h1 className='tc'>Loading...</h1> :\r\n        ( \r\n          <div className='tc'>\r\n            <h1 className ='f1  tc' id='title'>PokeFinder!</h1> \r\n            <SearchBox searchChange={this.onSearchChange}/> \r\n            <PokeList pokemon={filteredPokemon}/>\r\n          </div>\r\n        )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}